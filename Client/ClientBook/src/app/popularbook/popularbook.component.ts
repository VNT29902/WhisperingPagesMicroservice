import { Component, OnInit } from '@angular/core';
import { BookService } from '../services/book.service';
import { CommonModule } from '@angular/common';
import { AddToCartButtonComponent } from '../add-to-cart-button/add-to-cart-button.component';
import { BookAndPromotion } from '../models/bookAndPromotion.model';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-popularbook',
  standalone: true,
  imports: [CommonModule, AddToCartButtonComponent,RouterLink],
  templateUrl: './popularbook.component.html',
  styleUrls: ['./popularbook.component.css']
})
export class PopularbookComponent implements OnInit {
  genres: string[] = ['T·∫•t c·∫£ th·ªÉ lo·∫°i', 'Khoa H·ªçc', 'Tri·∫øt H·ªçc', 'Ngh·ªá Thu·∫≠t', 'Kinh Doanh', 'L·ªãch S·ª≠'];
  genreMap: { [key: string]: string } = {
    'T·∫•t c·∫£ th·ªÉ lo·∫°i': 'all',
    'Khoa H·ªçc': 'khoa-hoc',
    'Tri·∫øt H·ªçc': 'triet-hoc',
    'Ngh·ªá Thu·∫≠t': 'nghe-thuat',
    'Kinh Doanh': 'kinh-doanh',
    'L·ªãch S·ª≠': 'lich-su'
  };

  selectedGenre: string = 'T·∫•t c·∫£ th·ªÉ lo·∫°i';
  books: BookAndPromotion[] = []; // üëà thay ƒë·ªïi

  private cache: Map<string, BookAndPromotion[]> = new Map(); // üëà thay ƒë·ªïi

  constructor(private bookService: BookService) {}

  ngOnInit(): void {
    this.selectGenre(this.selectedGenre); // g·ªçi l·∫ßn ƒë·∫ßu
  }

selectGenre(genre: string): void {
  this.selectedGenre = genre;
  const category = this.genreMap[genre];
  const key = `${category || 'all'}-8-0`;

  // ‚úÖ ∆Øu ti√™n l·∫•y t·ª´ cache local component
  if (this.cache.has(key)) {
    this.books = this.cache.get(key)!;
    console.log('üì¶ L·∫•y t·ª´ cache component:', key);
    return;
  }

  console.log('üåê G·ªçi API v·ªõi category =', category);

  this.bookService.getBooksByCategory(category, 8, 0).subscribe({
    next: (res) => {
      this.books = res.content;               // ‚úÖ l·∫•y m·∫£ng t·ª´ content
      this.cache.set(key, this.books);        // ‚úÖ l∆∞u m·∫£ng v√†o cache
      console.log('üìö S√°ch nh·∫≠n ƒë∆∞·ª£c:', this.books);
    },
    error: (err) => {
      console.error('‚ùå L·ªói khi l·∫•y s√°ch:', err);
    }
  });
}


  showFullTitle(title: string) {
    alert(title); // ho·∫∑c modal, toast
  }

  getStockWidth(bp: BookAndPromotion): number {
    const book = bp.bookResponseDto;
    if (book.stock === 0) return 100;
    if (book.stock < 10) return 80;
    if (book.saleStock > book.stock) return 50;
    return (book.saleStock / book.stock) * 100;
  }
}
